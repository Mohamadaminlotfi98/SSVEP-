def data_batch_FFT_one_tester_abs_UD(test_trainer,time_length):
    
    simpling_rate = 256
    window_length = int(256*time_length) #窗口长度1s
    data_length = 1024 #4s
    fft_scale = int(data_length/window_length) #5s则scale=5

    # print('Preparing dataset.....')
    all_datas_1 = []
    all_datas_2 = []
    all_datas_3 = []
    all_labels = []
    
    test_datas_1 = []
    test_datas_2 = []
    test_datas_3 = []
    test_labels = []
    
    rawdata = loadmat('/gdrive/MyDrive/EEG/s1.mat') #1号被试
    rawdata = rawdata['eeg']
    
    for j in range(12): #12个targets
        targets_index = j
        for k in range(15): #15个trials
            block_index = k
            
            channel1_data = rawdata[targets_index,0,72:1096,block_index]
            channel2_data = rawdata[targets_index,1,72:1096,block_index]
            channel3_data = rawdata[targets_index,2,72:1096,block_index]
            channel4_data = rawdata[targets_index,3,72:1096,block_index]
            channel5_data = rawdata[targets_index,4,72:1096,block_index]
            channel6_data = rawdata[targets_index,5,72:1096,block_index]
            channel7_data = rawdata[targets_index,6,72:1096,block_index]
            channel8_data = rawdata[targets_index,7,72:1096,block_index]
            
            yd4_1,yd3_1,yd2_1 = band_filter_process(channel1_data)
            yd4_2,yd3_2,yd2_2 = band_filter_process(channel2_data)
            yd4_3,yd3_3,yd2_3 = band_filter_process(channel3_data)
            yd4_4,yd3_4,yd2_4 = band_filter_process(channel4_data)
            yd4_5,yd3_5,yd2_5 = band_filter_process(channel5_data)
            yd4_6,yd3_6,yd2_6 = band_filter_process(channel6_data)
            yd4_7,yd3_7,yd2_7 = band_filter_process(channel7_data)
            yd4_8,yd3_8,yd2_8 = band_filter_process(channel8_data)
            
            for m in range(fft_scale):
                
                all_datas_1.append(np.array([(np.abs(np.fft.rfft(yd4_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_3[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_4[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_5[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_6[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_7[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_8[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd4_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1]]))
                
                all_datas_2.append(np.array([(np.abs(np.fft.rfft(yd3_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_3[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_4[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_5[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_6[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_7[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_8[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd3_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1]]))
                
                all_datas_3.append(np.array([(np.abs(np.fft.rfft(yd2_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_3[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_4[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_5[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_6[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_7[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_8[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_1[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1],
                                             (np.abs(np.fft.rfft(yd2_2[m*window_length:(m+1)*window_length],1024))/window_length)[round(5/0.25):round(55/0.25) + 1]]))

                all_labels.append(targets_index)
    
    all_datas_1 = np.expand_dims(np.array(all_datas_1),axis=-1)
    all_datas_2 = np.expand_dims(np.array(all_datas_2),axis=-1)
    all_datas_3 = np.expand_dims(np.array(all_datas_3),axis=-1)
    all_labels = np.array(all_labels)

    return all_datas_1,all_datas_2,all_datas_3,all_labels
